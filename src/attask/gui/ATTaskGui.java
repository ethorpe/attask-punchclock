/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package attask.gui;

import attask.beans.HistoryItem;
import attask.beans.HourBean;
import attask.beans.LoggingBean;
import attask.beans.TaskBean;
import attask.beans.TaskHistoryBean;
import attask.beans.TaskHistoryComp;
import attask.beans.TimesheetBean;
import attask.beans.UserBean;
import attask.engine.ATTaskInterface;
import static attask.engine.ATTaskInterface.getTasksBasedOnUser;
import attask.engine.WorkTimer;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

public class ATTaskGui extends javax.swing.JFrame {
    
    Thread yourTimer = null;
    UserBean attaskUser;
    TaskBean tasks;
    HourBean incomingHr;
    String taskName;
    String taskId;
    LoggingBean userLog;
    Color oldBkgColor;
    ImageIcon open = new ImageIcon("resources/imgs/Open.png");
    ImageIcon closed = new ImageIcon("resources/imgs/Locked.png");
    boolean VALIDATE = true;
    HashMap<String, Double> callDaysHours = new HashMap<String, Double>();
    int FULL_DAYS_HRS = 8;
    TimesheetBean currentTimesheet = new TimesheetBean();

    
    /** Creates new form Find */
    public ATTaskGui() {
        initComponents();
        userLog = new LoggingBean();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginDlg = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        userNameTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        savePwdBox = new javax.swing.JCheckBox();
        userLoginBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        pwdTxt = new javax.swing.JPasswordField();
        loginOutput = new javax.swing.JLabel();
        commentsDlg = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        taskNameLbl = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentsTxt = new javax.swing.JTextArea();
        commentBtn = new javax.swing.JButton();
        cancelCommentsBtn = new javax.swing.JButton();
        historyFrame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        historyTaskNameLbl = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        totalHrsLbl = new javax.swing.JLabel();
        otAlertDlg = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        overTimeLbl = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        alertPopup = new javax.swing.JDialog();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        confirmTshetSubmitBtn = new javax.swing.JButton();
        cancelTshetSubmittalBtn = new javax.swing.JButton();
        missedDaysDlg = new javax.swing.JDialog();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        datesTxtArea = new javax.swing.JTextArea();
        datesBtn = new javax.swing.JButton();
        unlockDlg = new javax.swing.JDialog();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        unlockBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        activateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        outputLbl = new javax.swing.JLabel();
        loginBtn = new javax.swing.JButton();
        historyBtn = new javax.swing.JButton();
        commentsBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        taskComboBox = new javax.swing.JComboBox();
        timeSheetStateBtn = new javax.swing.JButton();
        reminderLbl = new javax.swing.JLabel();

        jLabel4.setText("ATTask Login");

        jLabel5.setText("UserName");

        jLabel6.setText("Password");

        savePwdBox.setText("Remember Password");
        savePwdBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePwdBoxActionPerformed(evt);
            }
        });

        userLoginBtn.setText("Login");
        userLoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginAction(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout loginDlgLayout = new org.jdesktop.layout.GroupLayout(loginDlg.getContentPane());
        loginDlg.getContentPane().setLayout(loginDlgLayout);
        loginDlgLayout.setHorizontalGroup(
            loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(loginDlgLayout.createSequentialGroup()
                .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(savePwdBox)
                    .add(loginDlgLayout.createSequentialGroup()
                        .add(17, 17, 17)
                        .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(loginDlgLayout.createSequentialGroup()
                                .add(38, 38, 38)
                                .add(userLoginBtn)
                                .add(18, 18, 18)
                                .add(cancelBtn))
                            .add(loginDlgLayout.createSequentialGroup()
                                .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(pwdTxt))
                            .add(loginDlgLayout.createSequentialGroup()
                                .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(userNameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(0, 141, Short.MAX_VALUE))
            .add(loginDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 146, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(65, 65, 65)
                .add(loginOutput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loginDlgLayout.setVerticalGroup(
            loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(loginDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(loginOutput))
                .add(18, 18, 18)
                .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(userNameTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(pwdTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(savePwdBox)
                .add(18, 18, 18)
                .add(loginDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userLoginBtn)
                    .add(cancelBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setText("Task:");

        jLabel8.setText("Comments:");

        commentsTxt.setColumns(20);
        commentsTxt.setRows(5);
        jScrollPane1.setViewportView(commentsTxt);

        commentBtn.setText("Submit");
        commentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentBtnActionPerformed(evt);
            }
        });

        cancelCommentsBtn.setText("Cancel");
        cancelCommentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCommentsBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout commentsDlgLayout = new org.jdesktop.layout.GroupLayout(commentsDlg.getContentPane());
        commentsDlg.getContentPane().setLayout(commentsDlgLayout);
        commentsDlgLayout.setHorizontalGroup(
            commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(commentsDlgLayout.createSequentialGroup()
                .add(commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(commentsDlgLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 366, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(commentsDlgLayout.createSequentialGroup()
                                .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(taskNameLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 312, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(commentsDlgLayout.createSequentialGroup()
                        .add(86, 86, 86)
                        .add(commentBtn)
                        .add(50, 50, 50)
                        .add(cancelCommentsBtn)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        commentsDlgLayout.setVerticalGroup(
            commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(commentsDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(taskNameLbl))
                .add(43, 43, 43)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(30, 30, 30)
                .add(commentsDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(commentBtn)
                    .add(cancelCommentsBtn))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Hours", "Comments"
            }
        ));
        historyTable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(historyTable);
        historyTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (historyTable.getColumnModel().getColumnCount() > 0) {
            historyTable.getColumnModel().getColumn(1).setMinWidth(20);
        }

        jLabel3.setText("Task:");

        jLabel9.setText("Total Hours:");

        org.jdesktop.layout.GroupLayout historyFrameLayout = new org.jdesktop.layout.GroupLayout(historyFrame.getContentPane());
        historyFrame.getContentPane().setLayout(historyFrameLayout);
        historyFrameLayout.setHorizontalGroup(
            historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(historyFrameLayout.createSequentialGroup()
                .addContainerGap()
                .add(historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(historyFrameLayout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(historyTaskNameLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(historyFrameLayout.createSequentialGroup()
                        .add(historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 539, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(historyFrameLayout.createSequentialGroup()
                                .add(jLabel9)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(totalHrsLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        historyFrameLayout.setVerticalGroup(
            historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(historyFrameLayout.createSequentialGroup()
                .addContainerGap()
                .add(historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(historyTaskNameLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
                .add(historyFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(totalHrsLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("Alert: Extensive OT Detected");
        jLabel10.setToolTipText("");

        jLabel11.setText("Please confirm that you wish to continue logging time to ATTask. If you wish to ");

        jLabel12.setText("continue press \"Continue Logging\" otherwise press \"Stop Logging\" button.");

        jLabel13.setText("Total Hours Logged:");

        overTimeLbl.setForeground(new java.awt.Color(255, 0, 0));

        jButton1.setText("Continue Logging");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueLoggingActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setText("Stop Logging");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopLoggingActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Disable this alert");

        org.jdesktop.layout.GroupLayout otAlertDlgLayout = new org.jdesktop.layout.GroupLayout(otAlertDlg.getContentPane());
        otAlertDlg.getContentPane().setLayout(otAlertDlgLayout);
        otAlertDlgLayout.setHorizontalGroup(
            otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(otAlertDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(otAlertDlgLayout.createSequentialGroup()
                        .add(otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(otAlertDlgLayout.createSequentialGroup()
                                .add(otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(otAlertDlgLayout.createSequentialGroup()
                                        .add(jLabel13)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(overTimeLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jCheckBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .add(otAlertDlgLayout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(63, 63, 63))))
        );
        otAlertDlgLayout.setVerticalGroup(
            otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(otAlertDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel11)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel12)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel13, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(overTimeLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(otAlertDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .add(18, 18, 18)
                .add(jCheckBox1)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTextField1.setText("jTextField1");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 51));
        jLabel14.setText("Alert");
        jLabel14.setToolTipText("");

        jLabel15.setText("Are you sure you want to submit your time sheet for review?");
        jLabel15.setPreferredSize(new java.awt.Dimension(320, 14));

        confirmTshetSubmitBtn.setText("Proceed");
        confirmTshetSubmitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmTshetSubmitBtnActionPerformed(evt);
            }
        });

        cancelTshetSubmittalBtn.setText("Cancel");
        cancelTshetSubmittalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTshetSubmittalBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout alertPopupLayout = new org.jdesktop.layout.GroupLayout(alertPopup.getContentPane());
        alertPopup.getContentPane().setLayout(alertPopupLayout);
        alertPopupLayout.setHorizontalGroup(
            alertPopupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alertPopupLayout.createSequentialGroup()
                .add(alertPopupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(alertPopupLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(alertPopupLayout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(confirmTshetSubmitBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cancelTshetSubmittalBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 332, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        alertPopupLayout.setVerticalGroup(
            alertPopupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(alertPopupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(alertPopupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(confirmTshetSubmitBtn)
                    .add(cancelTshetSubmittalBtn))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 0, 51));
        jLabel16.setText("Alert");
        jLabel16.setToolTipText("");

        jLabel17.setText("The following dates are missing time:");

        datesTxtArea.setColumns(20);
        datesTxtArea.setRows(5);
        jScrollPane3.setViewportView(datesTxtArea);

        datesBtn.setText("OK");
        datesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datesBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout missedDaysDlgLayout = new org.jdesktop.layout.GroupLayout(missedDaysDlg.getContentPane());
        missedDaysDlg.getContentPane().setLayout(missedDaysDlgLayout);
        missedDaysDlgLayout.setHorizontalGroup(
            missedDaysDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(missedDaysDlgLayout.createSequentialGroup()
                .add(missedDaysDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(missedDaysDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(missedDaysDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(missedDaysDlgLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(missedDaysDlgLayout.createSequentialGroup()
                                .addContainerGap()
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 305, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(missedDaysDlgLayout.createSequentialGroup()
                        .add(142, 142, 142)
                        .add(datesBtn)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        missedDaysDlgLayout.setVerticalGroup(
            missedDaysDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(missedDaysDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(datesBtn)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 0, 51));
        jLabel18.setText("Alert");
        jLabel18.setToolTipText("");

        jLabel19.setText("Your timesheet has been recalled!");

        unlockBtn.setText("OK");
        unlockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout unlockDlgLayout = new org.jdesktop.layout.GroupLayout(unlockDlg.getContentPane());
        unlockDlg.getContentPane().setLayout(unlockDlgLayout);
        unlockDlgLayout.setHorizontalGroup(
            unlockDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(unlockDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(unlockDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(unlockBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        unlockDlgLayout.setVerticalGroup(
            unlockDlgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(unlockDlgLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel19)
                .add(18, 18, 18)
                .add(unlockBtn)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATTask Assist");

        jLabel1.setText("Timesheet Task:");

        activateBtn.setText("START TIME");
        activateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Output:");

        outputLbl.setToolTipText("");

        loginBtn.setBackground(new java.awt.Color(255, 255, 255));
        loginBtn.setIcon(new javax.swing.ImageIcon("I:\\AttaskAssistApp\\resources\\imgs\\NewLogin.png")); // NOI18N
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        historyBtn.setIcon(new javax.swing.ImageIcon("I:\\AttaskAssistApp\\resources\\imgs\\history2.png")); // NOI18N
        historyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBtnActionPerformed(evt);
            }
        });

        commentsBtn.setIcon(new javax.swing.ImageIcon("I:\\AttaskAssistApp\\resources\\imgs\\comments.png")); // NOI18N
        commentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commentsBtnActionPerformed(evt);
            }
        });

        refreshBtn.setIcon(new javax.swing.ImageIcon("I:\\AttaskAssistApp\\resources\\imgs\\refresh.png")); // NOI18N
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        taskComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a Task" }));
        taskComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskComboBoxActionPerformed(evt);
            }
        });

        timeSheetStateBtn.setToolTipText("");
        timeSheetStateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSheetStateBtnActionPerformed(evt);
            }
        });

        reminderLbl.setForeground(new java.awt.Color(255, 0, 0));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(loginBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2)
                        .add(historyBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(timeSheetStateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(148, 148, 148)
                        .add(activateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(outputLbl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 272, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(commentsBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(refreshBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, reminderLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(taskComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 257, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, loginBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, historyBtn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(refreshBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, timeSheetStateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(reminderLbl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(taskComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(activateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(outputLbl))
                    .add(commentsBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        outputLbl.getAccessibleContext().setAccessibleName("outputLbl");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void activateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateBtnActionPerformed
        // TODO add your handling code here:
        String taskName = (String)taskComboBox.getSelectedItem();
        String taskId =  tasks.getTaskIDs().get(taskName);
        WorkTimer timesheetClock = WorkTimer.getInstance();
        timesheetClock.setOtAlertDialog(otAlertDlg);
        timesheetClock.setOtLabel(overTimeLbl);
        timesheetClock.setParentFrame(this);
        if(incomingHr != null)
        {
            outputLbl.setText(incomingHr.getHour() + "."+incomingHr.getMin()+" Hours Logged.");
            incomingHr.setTaskID(taskId);
            timesheetClock.setIncomingHr(incomingHr);
        }        
        if(activateBtn.getText().equals("START TIME"))
        {
            timesheetClock.startLoggingTime();
            oldBkgColor = activateBtn.getBackground();
            activateBtn.setBackground(Color.red);
            timesheetClock.setUserInfo(attaskUser);
            timesheetClock.setOutputLabel(outputLbl);
            yourTimer = (new Thread(timesheetClock));
            yourTimer.start();
            activateBtn.setText("STOP TIME");
            try {
                userLog.logActivity(ATTaskInterface.getCurrentFormattedDateTime() + "START TIME button pressed.");
            } catch (IOException ex) {
                Logger.getLogger(ATTaskGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            taskComboBox.setEnabled(false);
        }
        else{
            taskComboBox.setEnabled(true);
            timesheetClock.stopLoggingTime();
            activateBtn.setBackground(oldBkgColor);
            activateBtn.setText("START TIME");
            try {
                userLog.logActivity(ATTaskInterface.getCurrentFormattedDateTime() + " STOP TIME button has been pressed.");
            } catch (IOException ex) {
                Logger.getLogger(ATTaskGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            yourTimer.interrupt();
        }
        
    }//GEN-LAST:event_activateBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // TODO add your handling code here:
        loginDlg.setSize(342, 230);
        loginDlg.setLocationRelativeTo(this);
        loginDlg.setVisible(true);
        String userInfo[] = getPasswordConfigs();
        
        if(userInfo == null){
            savePwdBox.setSelected(false);
        }else{
            savePwdBox.setSelected(true);
            userNameTxt.setText(userInfo[0]);
            pwdTxt.setText(userInfo[1]);
        }
        
    }//GEN-LAST:event_loginBtnActionPerformed

    private void loginAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginAction
          // TODO add your handling code here:

        try
        {
            if(savePwdBox.isSelected())  //save the password
            {
               savePasswordConfigs(userNameTxt.getText(), pwdTxt.getText());
            }
            else{
               savePasswordConfigs("", "");
            }

            attaskUser = new UserBean();
            attaskUser.setUser(userNameTxt.getText());
            attaskUser.setPassword(pwdTxt.getText());
            attaskUser = ATTaskInterface.login(attaskUser);
            if(attaskUser.getSessionId() != null){
                tasks = ATTaskInterface.getTasksBasedOnUser(attaskUser);
            }

            loginDlg.setVisible(false);
            HashMap<String, String> taskInfo = tasks.getTaskIDs();
            Set<String> taskKeys = taskInfo.keySet();

            for(String taskName : taskKeys)
            {
                taskComboBox.addItem(taskName);
            }            
            //check to see if timesheet is locked
            setTimesheetState();
            //check if its timesheet day and alert
            isTimeToSubmitTshet();
            outputLbl.setText("Logged In.");
        }catch(Exception e)
        {
            System.out.println(e.getMessage());
            loginOutput.setText("Login Failed!");
        }
    }//GEN-LAST:event_loginAction

    private void commentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentsBtnActionPerformed
        commentsDlg.setSize(400, 325);
        commentsDlg.setLocationRelativeTo(this);
        commentsDlg.setVisible(true);
        String taskName = (String)taskComboBox.getSelectedItem();
        taskNameLbl.setText(taskName);
    }//GEN-LAST:event_commentsBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:
        tasks = ATTaskInterface.getTasksBasedOnUser(attaskUser);
        HashMap<String, String> taskInfo = tasks.getTaskIDs();
        Set<String> taskKeys = taskInfo.keySet();
        taskComboBox.removeAllItems();
        taskComboBox.addItem("Select a Task");
        for(String taskNames : taskKeys)
        {
            taskComboBox.addItem(taskNames);
        }
        
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void cancelCommentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCommentsBtnActionPerformed
        // TODO add your handling code here:
        commentsDlg.setVisible(false);
    }//GEN-LAST:event_cancelCommentsBtnActionPerformed

    private void commentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commentBtnActionPerformed
        // TODO add your handling code here:
        HashMap<String, String> taskInfo = tasks.getTaskIDs();
        WorkTimer attaskTimer = WorkTimer.getInstance();
        attaskTimer.setMinsToSubtract(1);
        ATTaskInterface.updateUserDiscriptionByTask(attaskUser, taskInfo.get((String)taskComboBox.getSelectedItem()), commentsTxt.getText());
        commentsDlg.setVisible(false);
        commentsTxt.setText("");
    }//GEN-LAST:event_commentBtnActionPerformed

    private void taskComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taskComboBoxActionPerformed
        // TODO add your handling code here:
        taskName = (String)taskComboBox.getSelectedItem();
        taskId =  tasks.getTaskIDs().get(taskName);

        incomingHr = ATTaskInterface.retrieveCurrentLoggedTime(attaskUser, taskId);
        if(incomingHr != null)
        {
            outputLbl.setText(incomingHr.getHour() + "."+incomingHr.getMin()+" Hours Logged.");
        }
        else{
            incomingHr = new HourBean();
            incomingHr.setTaskID(taskId);
            outputLbl.setText("No Hours Logged.");
        }
        
    }//GEN-LAST:event_taskComboBoxActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        loginDlg.setVisible(false);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void historyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyBtnActionPerformed
        // TODO add your handling code here:
        historyFrame.setSize(569, 315);
        historyFrame.setLocationRelativeTo(this);
        historyFrame.setVisible(true);

        TaskHistoryBean taskHistory = ATTaskInterface.getTaskTimeHistory(attaskUser, taskName, taskId);
        updateHistoryTable(taskHistory);

    }//GEN-LAST:event_historyBtnActionPerformed

    private void savePwdBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePwdBoxActionPerformed
        // TODO add your handling code here:    
    }//GEN-LAST:event_savePwdBoxActionPerformed

    private void continueLoggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueLoggingActionPerformed
        // TODO add your handling code here:
        WorkTimer attaskTimer = WorkTimer.getInstance();
        attaskTimer.startLoggingTime();
        otAlertDlg.setVisible(false);
    }//GEN-LAST:event_continueLoggingActionPerformed

    private void stopLoggingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopLoggingActionPerformed
        // TODO add your handling code here:
        yourTimer.interrupt();
        activateBtn.setText("START TIME");
        activateBtn.setBackground(oldBkgColor);
        otAlertDlg.setVisible(false);
        overTimeLbl.setText("");
    }//GEN-LAST:event_stopLoggingActionPerformed

    private void timeSheetStateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeSheetStateBtnActionPerformed
        
        // TODO add your handling code here:
        if("Timesheet Currently Unlocked".equals(timeSheetStateBtn.getToolTipText())){
            alertPopup.setSize(400, 165);
            alertPopup.setLocationRelativeTo(this);
            alertPopup.setVisible(true);
                    
        }else{
           ATTaskInterface.submitTimesheet(attaskUser, currentTimesheet.getTimesheetId(), "O");
           timeSheetStateBtn.setToolTipText("Timesheet Currently Unlocked");
           timeSheetStateBtn.setIcon(open);
           unlockDlg.setSize(417, 160);
           unlockDlg.setLocationRelativeTo(this);
           unlockDlg.setVisible(true);
           outputLbl.setText("Timesheet Unlocked!");
           

        }
    }//GEN-LAST:event_timeSheetStateBtnActionPerformed

    private void confirmTshetSubmitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmTshetSubmitBtnActionPerformed
        //check to see if all days are populated
        String dates="";
        if(VALIDATE)
        {
           ArrayList<String> missingDates = isAllEntriesCompleted();
           if(missingDates.size() > 0){
              for(int i=0; i<missingDates.size(); i++){
               dates += missingDates.get(i)+"\n";
              }
              datesTxtArea.setText(dates);
              missedDaysDlg.setSize(335,260);
              missedDaysDlg.setLocationRelativeTo(this);
              missedDaysDlg.setVisible(true);
              
           }
           else{
               ATTaskInterface.submitTimesheet(attaskUser, currentTimesheet.getTimesheetId(), "S");
               timeSheetStateBtn.setToolTipText("Timesheet Currently Submitted");
               timeSheetStateBtn.setIcon(closed);
               outputLbl.setText("Timesheet Submitted!");

           }
           
        }else{
            ATTaskInterface.submitTimesheet(attaskUser, currentTimesheet.getTimesheetId(), "S");
            timeSheetStateBtn.setToolTipText("Timesheet Currently Submitted");
            timeSheetStateBtn.setIcon(closed);
            outputLbl.setText("Timesheet Submitted!");
        }
        //then submit the timesheet
        //change image on button
        alertPopup.setVisible(false);
    }//GEN-LAST:event_confirmTshetSubmitBtnActionPerformed

    private void cancelTshetSubmittalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTshetSubmittalBtnActionPerformed
        alertPopup.setVisible(false);
    }//GEN-LAST:event_cancelTshetSubmittalBtnActionPerformed

    private void datesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datesBtnActionPerformed
        // TODO add your handling code here:
        missedDaysDlg.setVisible(false);
    }//GEN-LAST:event_datesBtnActionPerformed

    private void unlockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockBtnActionPerformed
        // TODO add your handling code here:
        unlockDlg.setVisible(false);
    }//GEN-LAST:event_unlockBtnActionPerformed
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATTaskGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATTaskGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATTaskGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATTaskGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ATTaskGui().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activateBtn;
    private javax.swing.JDialog alertPopup;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton cancelCommentsBtn;
    private javax.swing.JButton cancelTshetSubmittalBtn;
    private javax.swing.JButton commentBtn;
    private javax.swing.JButton commentsBtn;
    private javax.swing.JDialog commentsDlg;
    private javax.swing.JTextArea commentsTxt;
    private javax.swing.JButton confirmTshetSubmitBtn;
    private javax.swing.JButton datesBtn;
    private javax.swing.JTextArea datesTxtArea;
    private javax.swing.JButton historyBtn;
    private javax.swing.JFrame historyFrame;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel historyTaskNameLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JDialog loginDlg;
    private javax.swing.JLabel loginOutput;
    private javax.swing.JDialog missedDaysDlg;
    private javax.swing.JDialog otAlertDlg;
    private javax.swing.JLabel outputLbl;
    private javax.swing.JLabel overTimeLbl;
    private javax.swing.JPasswordField pwdTxt;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JLabel reminderLbl;
    private javax.swing.JCheckBox savePwdBox;
    private javax.swing.JComboBox taskComboBox;
    private javax.swing.JLabel taskNameLbl;
    private javax.swing.JButton timeSheetStateBtn;
    private javax.swing.JLabel totalHrsLbl;
    private javax.swing.JButton unlockBtn;
    private javax.swing.JDialog unlockDlg;
    private javax.swing.JButton userLoginBtn;
    private javax.swing.JTextField userNameTxt;
    // End of variables declaration//GEN-END:variables

    private void updateHistoryTable(TaskHistoryBean taskHistory) {
        
 /*       JTableHeader th = historyTable.getTableHeader();
        historyTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setPreferredWidth(15);
        tc = tcm.getColumn(1);
        tc.setPreferredWidth(10);
        tc = tcm.getColumn(2);
        tc.setPreferredWidth(50);
        th.repaint();
   */ 
        historyTaskNameLbl.setText(taskHistory.getTaskName());
        ArrayList<HistoryItem> taskList = taskHistory.getHistoryItems();
        DefaultTableModel model = (DefaultTableModel) historyTable.getModel();
        model.getDataVector().removeAllElements();
        Collections.sort(taskList, new TaskHistoryComp());
        double historyTotal=0;
        for(HistoryItem item : taskList){
   /*         
            historyTable.setValueAt(item.getTaskDate(),i,0);  
            historyTable.setValueAt(item.getLoggedTime(),i,1);
            historyTable.setValueAt(item.getComments(),i,2);
     */     
            historyTotal += item.getLoggedTime();
            model.addRow(new Object[]{item.getTaskDate(), item.getLoggedTime(), item.getComments()});
        }
        totalHrsLbl.setText(Double.toString(historyTotal));
        historyTable.repaint();
  /*      JTableHeader th = historyTable.getTableHeader();
        TableColumnModel tcm = th.getColumnModel();
        TableColumn tc = tcm.getColumn(0);
        tc.setHeaderValue( "Date");
        tc = tcm.getColumn(1);
      
        th.repaint();
    */       
    }

    private void savePasswordConfigs(String user, String password) {
        
        Properties prop = new Properties();
        try {
//          byte[] userHash = encrypt(user, "ThisIsASecretKey");
//          byte[] decrypted = decrypt(userHash);
          prop.setProperty("user", user);
          prop.setProperty("pwd", password);
          prop.store(new FileOutputStream("resources\\user.properties"), null);  //save changes
        } catch (IOException ex) {
          ex.printStackTrace();
        }
//        } catch (GeneralSecurityException ex) {
//            Logger.getLogger(ATTaskGui.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
    }

    private String[] getPasswordConfigs(){
        
        Properties prop = new Properties();
        String userCreds [] = new String[2];
        try {
          prop.load(new FileInputStream("resources\\user.properties"));
          userCreds[0] = prop.getProperty("user");
          userCreds[1] = prop.getProperty("pwd");
          prop.store(new FileOutputStream("resources\\user.properties"), null);  //save changes
          
          if((userCreds[0] == null || userCreds[0].equals("")) && (userCreds[1] == null || userCreds[1].equals("")))
          {
              return null;
          }
        } catch (IOException ex) {
          ex.printStackTrace();
        }
        return userCreds;  
    }

     public static byte[] encrypt(String key, String value) throws GeneralSecurityException {
            byte[] raw = new byte[]{'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};
            Key skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            byte[] iv = new byte[cipher.getBlockSize()];

            IvParameterSpec ivParams = new IvParameterSpec(iv);
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec,ivParams);
            byte[] encrypted  = cipher.doFinal(value.getBytes());
            System.out.println("encrypted string:" + encrypted.length);
            return encrypted;
     }
    
        public static  byte[]  decrypt(byte[] encrypted) 
        {
         byte[] original = null;
         Cipher cipher = null;
         try {
            byte[] raw = new byte[]{'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};
            Key key = new SecretKeySpec(raw, "AES");
            cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            //the block size (in bytes), or 0 if the underlying algorithm is not a block cipher
            byte[] ivByte = new byte[cipher.getBlockSize()];
            //This class specifies an initialization vector (IV). Examples which use
            //IVs are ciphers in feedback mode, e.g., DES in CBC mode and RSA ciphers with OAEP encoding operation.
            IvParameterSpec ivParamsSpec = new IvParameterSpec(ivByte);
            cipher.init(Cipher.DECRYPT_MODE, key, ivParamsSpec);
            original= cipher.doFinal(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return original;
    }  

    private void setTimesheetState() {
        
        currentTimesheet = ATTaskInterface.isTimesheetSubmitted(attaskUser);
        if("O".equals(currentTimesheet.getStatus())){
            timeSheetStateBtn.setToolTipText("Timesheet Currently Unlocked");
            timeSheetStateBtn.setIcon(open);
        }else{
            timeSheetStateBtn.setToolTipText("Timesheet Currently Submitted");
            timeSheetStateBtn.setIcon(closed);
        }
    }

    private ArrayList<String> isAllEntriesCompleted() {
        ArrayList<String> missingDates = new ArrayList<String>();
        HashSet<String> allTaskIDs = tasks.getAllTaskIds();
        String tasks[] = allTaskIDs.toArray(new String[allTaskIDs.size()]);
        //loop through the task ids
        for(int i=0; i<allTaskIDs.size(); i++){
            TaskHistoryBean taskHistory = ATTaskInterface.getTaskHistoryWithinTshet(attaskUser, tasks[i]);
            ArrayList<HistoryItem> historyItems = taskHistory.getHistoryItems();
            populatePopulatedDays(historyItems);
        }
        //build timesheet calendar
 
        int startYr = Integer.parseInt(ATTaskInterface.calculateFormattedTimesheetStartDate().split("-")[0]);
        int startMn = Integer.parseInt(ATTaskInterface.calculateFormattedTimesheetStartDate().split("-")[1]);
        int startDay = Integer.parseInt(ATTaskInterface.calculateFormattedTimesheetStartDate().split("-")[2]);
 
        int endDay=0;
        int currDay = Integer.parseInt(ATTaskInterface.calculateFormattedTimesheetStartDate().split("-")[2]);
        if(currDay == 1){   //timesheet is 1-15
            endDay = 15;
        }else{              //timesheet is 16-ENDOFMONTH
            endDay = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH);
        }
        for(int x=startDay; x<=endDay; x++){
           Calendar calDate = Calendar.getInstance();
           calDate.set(startYr, startMn-1, x);
           if((calDate.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY) && (calDate.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY)){
                if(callDaysHours.containsKey(String.valueOf(x)))   //if its a weekday and its missing here, thats a problem!
                {
                    double hours = callDaysHours.get(String.valueOf(x));
                    if(hours < 8)
                    {
                        missingDates.add(ATTaskInterface.getCurrentFormattedDateSetDate(x));
                    }
                }else{
                    missingDates.add(ATTaskInterface.getCurrentFormattedDateSetDate(x));
                }
            }

        }
        
        return missingDates;
    }

    private void populatePopulatedDays(ArrayList<HistoryItem> historyItems) {
       
        for(int i=0; i<historyItems.size(); i++){
            if(callDaysHours.containsKey(historyItems.get(i).getTaskDate().split("-")[2])){
                double hours = callDaysHours.get(historyItems.get(i).getTaskDate().split("-")[2]);
                callDaysHours.put(historyItems.get(i).getTaskDate().split("-")[2].replaceAll("0", ""), historyItems.get(i).getLoggedTime()+hours);
            }
            else{
                callDaysHours.put(historyItems.get(i).getTaskDate().split("-")[2].replaceAll("0", ""), historyItems.get(i).getLoggedTime());
            }
        }
    }

    private void isTimeToSubmitTshet() {
        int currentYr = Integer.parseInt(ATTaskInterface.getCurrentFormattedDate().split("-")[0]);
        int currentMn = Integer.parseInt(ATTaskInterface.getCurrentFormattedDate().split("-")[1]);
        int currentDay = Integer.parseInt(ATTaskInterface.getCurrentFormattedDate().split("-")[2]);
 
        int timesheetDay=0;
        int anchorDay = Integer.parseInt(ATTaskInterface.calculateFormattedTimesheetStartDate().split("-")[2]);
        if(anchorDay == 1){   //timesheet is 1-15
            timesheetDay = 15;
        }else{              //timesheet is 16-ENDOFMONTH
            timesheetDay = Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH);
        }
        Calendar calDate = Calendar.getInstance();
        calDate.set(currentYr, currentMn-1, timesheetDay);
        if(calDate.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY){
           timesheetDay -=1;       //back up to Friday
        }
        if(calDate.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){
           timesheetDay -=2;       //back up to Friday
        }
   
        if(currentDay == timesheetDay){
            reminderLbl.setText("REMINDER: Please submit your timesheet today!");
        }
        else
        {
            reminderLbl.setText("");
        }
    }
}
